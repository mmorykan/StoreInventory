syntax = "proto3"; 
package ecommerce;

service ProductInventory { 
    /* 
    Determines a successful Connection between client and server
    Parameter: Empty
    Returns: Empty
    */
    rpc determineSuccessfulConnection(Empty) returns (Empty);

    /*
    Add a product to the database
    Parameter: Product
    Returns: ProductID
    */
    rpc addProduct(Product) returns (ProductID); 

    /*
    Add an order to the database
    Parameter: Order
    Returns: OrderID
    */
    rpc addOrder(Order) returns (OrderID);

    /*
    Get a product from the database by specifying either the product's id value or the product's name
    Parameter: ProductID
    Returns: Product
    */
    rpc getProduct(ProductID) returns (Product);

    /*
    Get an order from the database by specifying the order's id value
    Parameter: OrderID
    Returns: Order
    */
    rpc getOrder(OrderID) returns (Order);

    /*
    Update a product currently in the database, denoting it by either its id value or its name
    Parameter: UpdateProductInfo
    Returns: Product
    */
    rpc updateProduct(UpdateProductInfo) returns (Product);

    /*
    Update an order currently in the database, denoting it by its id value
    Parameter: UpdateOrderInfo
    Returns: Order
    */
    rpc updateOrder(UpdateOrderInfo) returns (Order);

    /*
    Add products currently in the database to an order or add to the quantity of a product already in an order
    This will update the products stock automatically 
    Parameter: AddToOrder
    Returns: Order
    */
    rpc addProductsToOrder(AddToOrder) returns (Order);

    /*
    Remove products from a order or remove quantities of products already in an order.
    This will update the products stock automatically
    Parameter: RemoveFromOrder
    Returns: Order
    */
    rpc removeProductsFromOrder(RemoveFromOrder) returns (Order);

    /*
    List all products currently in the database.
    The list of products can be narrowed down by specifying if product are in stock and/or the manufacturer
    Parameter: ListProductsInfo
    Returns: Stream of Product
    */
    rpc listProducts(ListProductsInfo) returns (stream Product);

    /*
    List all orders currently in the database.
    The list of orders can be narrowed down by shipped status and/or paid status of the orders
    Parameter: OrderStatus
    Returns: Stream of Order
    */
    rpc listOrders(OrderStatus) returns (stream Order);
}

message Product { 
    // All fields except the id_number field are required for a product to be added to the database
    string id_number = 1;       // the id value of the product assigned by the server after being added (only used for server purposes)
    string name = 2;            // The name of the product (str)
    string description = 3;     // The description of the product (str)
    string manufacturer = 4;    // The manufacturer of the product (str)
    double wholesale_cost = 5;  // The wholesale cost of the product (float)
    double sale_cost = 6;       // The sale cost of the product (float)
    int32 amount_in_stock = 7;  // The amount of the product in stock (int)
}

message ProductAndDemand {
    // A pair of product id or name and quantity of product
    ProductID product = 1;      // Either the id value or the name of a product (ProductID)
    int32 num_of_product = 2;   // The quantity of the product to be added or removed (int)
}

message Order {
    // All fields except the id_number field must be specified to add an order to the database
    string id_number = 1;                      // The id value of the order (only used for server purposes)
    string destination = 2;                    // The destination of the order (str)
    string date = 3;                           // The date that the order will be delivered (str)
    repeated ProductAndDemand products = 4;    // A list of ProductAndDemand messages containing the id or name of the product you want to add and the quantity to add (ProductAndDemand)
    string is_paid = 5;                        // Whether or not the order had been paid for (str) Input values: 'T', 'F'
    string is_shipped = 6;                     // Whether or not the order has been shipped (str) Input values: 'T', 'F'
}

message ProductID { 
    // A Product can be specified by either the id value or the name, therefore, only one must be provided
    string id_number = 1;      // The id value of the product assigned by the server (str)
    string name = 2;           // The name of the product (str)
    // string manufacturer = 3;
}

message OrderID {
    string id_number = 1;   // The id value of the order assigned by the server (str)
}

message UpdateProductInfo {
    // The only required field is the id_number of name field depending on which one the user prefers to use
    string id_number = 1;         // The id value of the product assigned by the server (str)
    string name = 2;              // The name of the product (str)
    string description = 3;       // The description of the product (str)
    string manufacturer = 4;      // The manufacturer of the product (str)
    double wholesale_cost = 5;    // The wholesale cost of the product (float)
    double sale_cost = 6;         // The sale cost of the product (float)
    int32 amount_in_stock = 7;    // The current amount of the product in stock (int)
}   

message UpdateOrderInfo {
    // The only required field is the id_number field so the server knows which order to update
    string id_number = 1;     // The id value of the order assigned by the server (str)
    string destination = 2;   // The destination of the order (str)
    string date = 3;          // The delivery date of the order (str)
    string is_paid = 5;       // Whether or not the order is paid for (str) Input values: 'T', 'F'
    string is_shipped = 6;    // Whether or not the order is shipped (str) Input values: 'T', 'F'
}

message AddToOrder {
    // Used for adding products to and order. Both fields are required
    string id_number = 1;                       // The id value of the order assigned by the server (str)
    repeated ProductAndDemand products = 2;     // A list of ProductAndDemand objects that include the quantities and id values of products being added to the order (ProductAndDemand)
}

message RemoveFromOrder {
    // Used for removing products from and order. Both fields are required
    string id_number = 1;                       // The id value of the order assigned by the server (str)
    repeated ProductAndDemand products = 2;     // A list of ProductAndDemand objects that include the quantities and id values of products being removed from the order (ProductAndDemand)
}

message OrderStatus {
    // Both fields are optional. They default to 'T', retrieving all orders that have been shipped and paid
    string is_shipped = 1;  // Whether or not the order has been shipped (str) Input Values: 'T', 'F'
    string is_paid = 2;     // Whether or not the order has been paid for (str) Input Values: 'T', 'F'
}

message ListProductsInfo {
    // Both fields are optional. The in_stock field defaults to 'T', retrieving all products that are in stock 
    string manufacturer = 1;  // The manufacturer of the products to list (str)
    string in_stock = 2;      // Whether or not the products are in stock (str) Input Values: 'T', 'F'
}

message Empty {
                       // Empty field is only used in determining whether a successful connection to the server has been established 
}

